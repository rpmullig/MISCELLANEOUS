direction: down
# ---------- USER LAYER ----------

UserLayer: {
  label: "User Layer"
  style.fill: "#f3e5f5"

  Broker: "Broker" {
    shape: class
    style.fill: "#9575cd"
    + Sends submission email with attachments (SOVs, Loss Runs, Rent Roll, Apps)
    + Responds to UW/SSC document requests via email
    + Provides updates (BOR, forms) into central inbox
  }

  SharedServices: "Shared Services (SSC)" {
    shape: class
    style.fill: "#9575cd"
    + Picks up task from ImageRight queue
    + Views structured email + parsed attachments in viewer
    + Extracts values (e\.g\., Insured, Address, TIV, Broker, UW)
    + Creates submission record in WWIP → receives WWIP ID
    + Initiates reservation in eStart → receives eStart ID \& clearance status
    + Manually pastes IDs between systems (WWIP → IR, eStart → WWIP)
    + Updates WWIP with clearance
    + Flags/clears duplicate submission blocks if found
  }

  Underwriter: "Underwriter (UW)" {
    shape: class
    style.fill: "#9575cd"
    + Reviews submission via ImageRight viewer (linked via WWIP ID)
    + Uses WWIP for pricing, quoting, binder, notes
    + Sends email requests to broker for missing info
    + Reviews broker replies and new docs in ImageRight
    + Chooses WWIP or GLMS modeling path
    + Finalizes forms, deductible, referral logic
    + Sends indication or quote to broker
  }

  COE: "Center of Excellence (COE)" {
    shape: class
    style.fill: "#9575cd"
    + Receives modeling handoff from UW
    + Cleans SoV, removes macros, extra tabs
    + Uploads clean file into GLMS
    + Sets up scenarios (TIV, Peril, Sublimit)
    + Returns AAL/EL to UW as pricing guidance
  }
}

# ---------- SERVICES (UNGROUPED) ----------

ImageRight: "ImageRight (Doc Mgmt + Email Intake)" {
  shape: class
  style.fill: "#4dd0e1"
  + Sweeps inboxes (Standard, VIP, Rush)
  + Parses email + attachments into page viewer
  + Creates temporary drawer with ImageRight ID
  + Displays email \& PDFs as pages for SSC/UW
  + Generates SSC task in queue
  + Accepts manual file tagging
  + Drawer ID overwritten with WWIP Policy ID by SSC
  + Drawer accessible from WWIP via URL link
  + Accepts doc push from WWIP via Linker\.exe
}

eStart: "eStart / NGE" {
  shape: class
  style.fill: "#ffb74d"
  + Accepts submission details from SSC
  + Runs risk check: duplicate, sanction, block
  + Generates eStart ID
  + Returns clearance status
  + Allows shell record for unmatched accounts
}

WWIP: "WWIP Platform (Submission Lifecycle)" {
  shape: class
  style.fill: "#64b5f6"
  + Creates official WWIP submission ID
  + Accepts eStart ID and clearance status
  + Tracks stages: Reserved, Blocked, Solicited, Renewed
  + Houses UW Notes, Referrals, Binder, Quotes
  + Embeds worksheet for UW pricing
  + Runs geocoder → Validus scoring
  + Sends documents via Linker\.exe to ImageRight
  + Calls Clarion Door for ISO Class + Symbol
  + Stores forms, email templates, flags, prior quotes
  + URL link to ImageRight drawer via WWIP ID
}

GLMS: "GLMS (Modeling System)" {
  shape: class
  style.fill: "#7b9f35"
  + Accepts scenario requests from COE or UW
  + Prepares file output for Lynx (cronjob format)
  + Merges CAT results from RMS/AIR/Validus
  + Sends final data to AIGRater for pricing
  + Uploads outputs to GDMS
}

# ---------- RESEARCH LAYER ----------

ResearchLayer: {
  label: "Research Layer"
  style.fill: "#ede7f6"

  Embedded: {
    label: "Embedded/Internal Services"
    style.fill: "#f0f4c3"

    Validus: "Validus Risk Services" {
      shape: class
      style.fill: "#81c784"
      + Scoring API: Crime, Brush, DTC, ISO
    }

    WWIPGeocoder: "WWIP Embedded Maps" {
      shape: class
      style.fill: "#81c784"
      + Converts address to lat/long
      + Input for Validus risk scoring
    }

    ClarionDoor: "Clarion Door (ISO Rating)" {
      shape: class
      style.fill: "#f48fb1"
      + API for Protection Class, Fire Symbol
    }

    PlacelyGeo: "Placely Geoservices" {
      shape: class
      style.fill: "#f48fb1"
      + Validates rooftop match vs SoV
    }

    Lynx: "Lynx CAT Orchestrator" {
      shape: class
      style.fill: "#f48fb1"
      + Accepts scenario files from GLMS
      + Runs RMS, AIR, Validus
      + Merges result, sends back to GLMS
    }

    AIGRater: "AIG Rater (HX)" {
      shape: class
      style.fill: "#f48fb1"
      + Returns technical price for quote
    }
  }

  Manual: {
    label: "Manual External Research"
    style.fill: "#ede7f6"

    GoogleMaps: "Google Maps (Visual Check)" {
      shape: class
      style.fill: "#aed581"
      + Manual review of flood zone, structure
    }

    CrimeSpot: "CrimeSpot / SpotCrime" {
      shape: class
      style.fill: "#aed581"
      + Manual crime lookup
    }

    RiskMeter: "RiskMeter" {
      shape: class
      style.fill: "#aed581"
      + Wildfire, wind risk overlays
    }

    NewsWeb: "Public Sources" {
      shape: class
      style.fill: "#aed581"
      + Searches: Google, Yelp, Lawsuits
    }

    UWGuidelines: "UW Guidelines (OneNote)" {
      shape: class
      style.fill: "#aed581"
      + Manual playbook used for judgment
    }
  }
}

# ---------- DATA LAYER ----------

DataLayer: {
  label: "Data Layer"
  style.fill: "#e8f5e9"

  ImageRightDB: "ImageRight Archive" {
    shape: class
    style.fill: "#4fc3f7"
    - Stores broker submissions, parsed attachments
    - Tied to WWIP ID
    - Stores binders, notes, letters
  }

  WWIPDB: "WWIP SQL DB" {
    shape: class
    style.fill: "#4fc3f7"
    - Tracks quote lifecycle, doc attachments, referrals
    - Stores pre-indication values, scoring results
    - Logs document push events to ImageRight
  }

  GDMS: "GDMS CAT Storage" {
    shape: class
    style.fill: "#4fc3f7"
    - Archives CAT scenarios from GLMS
    - Stores modeled premiums and perils
  }
}

# ---------- FLOW ----------

UserLayer.Broker -> ImageRight: Sends submission email with attachments
ImageRight -> UserLayer.SharedServices: Creates queue + parses documents
UserLayer.SharedServices -> WWIP: Creates WWIP ID
UserLayer.SharedServices -> eStart: Creates reservation, gets eStart ID \& status
eStart -> WWIP: Updates WWIP with eStart ID \& clearance
UserLayer.SharedServices -> ImageRight: Overwrites Drawer ID with WWIP Policy #

WWIP -> UserLayer.SharedServices: Submission unlocked for UW
WWIP -> UserLayer.Underwriter: Sends assignment notification

UserLayer.Underwriter -> ImageRight: Reviews submission via WWIP-linked drawer
WWIP -> ResearchLayer.Embedded.WWIPGeocoder: Geocodes address
ResearchLayer.Embedded.WWIPGeocoder -> ResearchLayer.Embedded.Validus: Runs risk scoring
WWIP -> ResearchLayer.Embedded.Validus: Receives risk scores

UserLayer.Underwriter -> GLMS: Sends request for modeling
GLMS -> ResearchLayer.Embedded.Lynx: Sends files for RMS, AIR, Validus
ResearchLayer.Embedded.Lynx -> GLMS: Returns merged result
GLMS -> ResearchLayer.Embedded.AIGRater: Sends result for pricing
ResearchLayer.Embedded.AIGRater -> UserLayer.Underwriter: Returns technical premium

GLMS -> ResearchLayer.Embedded.PlacelyGeo: Confirms rooftop accuracy

UserLayer.Underwriter -> ResearchLayer.Manual.GoogleMaps: Reviews visually
UserLayer.Underwriter -> ResearchLayer.Manual.CrimeSpot: Manually checks crime zone
UserLayer.Underwriter -> ResearchLayer.Manual.RiskMeter: Validates external hazard
UserLayer.Underwriter -> ResearchLayer.Manual.NewsWeb: Searches public sources
UserLayer.Underwriter -> ResearchLayer.Manual.UWGuidelines: Consults UW playbook

UserLayer.Underwriter -> WWIP: Finalizes quote, fills worksheet
WWIP -> ResearchLayer.Embedded.ClarionDoor: Gets ISO Class
WWIP -> DataLayer.WWIPDB: Saves lifecycle data, quote fields
WWIP -> DataLayer.ImageRightDB: Pushes binders via Linker\\.exe
GLMS -> DataLayer.GDMS: Uploads modeled outputs

ImageRight -> DataLayer.ImageRightDB: Archives broker submission and follow-ups

# ---------- LEGEND ----------

Legend: "Legend" {
  grid-rows: 2
}

Legend.User: {
  shape: class
  style.fill: "#9575cd"
}
Legend.ImageRight: {
  shape: class
  style.fill: "#4dd0e1"
}
Legend.eStart: {
  shape: class
  style.fill: "#ffb74d"
}
Legend.WWIP: {
  shape: class
  style.fill: "#64b5f6"
}
Legend.GLMS: {
  shape: class
  style.fill: "#7b9f35"
}
Legend.Storage: {
  shape: class
  style.fill: "#4fc3f7"
}
Legend.Tools: {
  shape: class
  style.fill: "#f48fb1"
}
